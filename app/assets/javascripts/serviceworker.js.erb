console.log('[Service Worker] Hello world!');

var CACHE_NAME = 'v1-cached-assets'

function onInstall(event) {
  event.waitUntil(
    caches.open(CACHE_NAME).then(function prefill(cache) {
      return cache.addAll([
        '/offline.html',
        // you get the idea ...
      ]);
    })
  );
}

function onFetch(event) {
  // Fetch from network, fallback to cached content, then offline.html for same-origin GET requests
  var request = event.request;

  // if (!request.url.match(/^https?:\/\/daumgoodcooking.com/) ) { return; }
  if (request.method !== 'GET') { return; }

  console.log("fetch!");

  console.log(event.request);

  event.respondWith(
    fetch(request)                                        // first, the network
      .catch(function(e) {
          console.error('Fetch failed; returning offline page instead.', e);
          return caches.open(CACHE_NAME).then(function(cache) {
          return cache.match('/offline.html');
        })
      })
  );

  // See https://jakearchibald.com/2014/offline-cookbook/#on-network-response for more examples
}

function onActivate(event) {
  console.log('[Serviceworker]', "Activating!", event);
  event.waitUntil(
    caches.keys().then(function(cacheNames) {
      return Promise.all(
        cacheNames.filter(function(cacheName) {
          // Return true if you want to remove this cache,
          // but remember that caches are shared across
          // the whole origin
          return cacheName.indexOf('v1') !== 0;
        }).map(function(cacheName) {
          return caches.delete(cacheName);
        })
      );
    })
  );
}

self.addEventListener('install', onInstall)
self.addEventListener('activate', onActivate)
self.addEventListener('fetch', onFetch);


